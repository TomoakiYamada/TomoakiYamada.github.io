<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Tomoaki Yamada</title>
    <link>https://tomoakiyamada.github.io/ja/tags/python/</link>
      <atom:link href="https://tomoakiyamada.github.io/ja/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Wed, 15 May 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://tomoakiyamada.github.io/media/icon_hu_76995b381a57c629.png</url>
      <title>Python</title>
      <link>https://tomoakiyamada.github.io/ja/tags/python/</link>
    </image>
    
    <item>
      <title>数値計算初心者にPythonよりJuliaをお勧めする理由</title>
      <link>https://tomoakiyamada.github.io/ja/post/24-recommend-julia/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      <guid>https://tomoakiyamada.github.io/ja/post/24-recommend-julia/</guid>
      <description>&lt;h2 id=&#34;juliaの長所&#34;&gt;Juliaの長所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;math.fabs(x)&lt;/code&gt;より&lt;code&gt;abs(x)&lt;/code&gt;の方がわかりやすい。
&lt;ul&gt;
&lt;li&gt;絶対値を計算する方法。前者はPythonで後者はJulia。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MATLAB経験者であれば、Juliaの方がより似ているので移行がしやすい。&lt;/li&gt;
&lt;li&gt;ループが1から始まる。&lt;/li&gt;
&lt;li&gt;計算速度が早い。
&lt;ul&gt;
&lt;li&gt;ただし、適当に書いて勝手に早くなるわけではない。&lt;/li&gt;
&lt;li&gt;計算速度がきちんと高速になる書き方を身につける(=Juliaの仕組みを知る)必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pythonの強み&#34;&gt;Pythonの強み&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数値計算分野以外の汎用性は圧倒的にPython。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;JuliaでWebデザインとか(おそらく)しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;そのため、研究者志望以外の学生に教えるならJuliaよりPython。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;あるいはお手軽さ重視でR。&lt;/li&gt;
&lt;li&gt;ゼミ生が就職活動で「Rを使ったことがあるか」を聞かれたらしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;機械学習をするなら現時点ではPythonのほうが充実している。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ひょっとしたら、今後はJuliaのスピードが活かされる局面もあるのかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Python人口が多いので、ネットや本屋で情報が充実していたり、IDEなども便利なものが一通り揃っている。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;計算速度について&#34;&gt;計算速度について&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Juliaの強みは計算速度。特にPythonでは極力ループを避けるのに対して、&lt;strong&gt;Juliaはコードの書き方に注意すれば&lt;/strong&gt;気軽にループを回せる。&lt;/li&gt;
&lt;li&gt;Juliaで高速化をさせるためには&amp;quot;それ用&amp;quot;の書き方を身につける必要がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;関数の使い方etc。何も考えないでコードを書いて、勝手に早くなるとは限らない。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;本格的に計算速度が必要な大きなプロジェクトに取り組むようになったら、結局は並列処理だとか色々と&amp;quot;追加的な勉強&amp;quot;をしないといけなくなる。&lt;/li&gt;
&lt;li&gt;そのレベルに達したら、新しい言語を学ぶ追加的コストとか、スーパーコンピューターを使う金銭的コストなど、諸々を計算できるだけの知識も蓄えられているはず。その際に、数値計算の学習のスタートがJuliaだったかPythonだったかなんて、ほとんど誤差レベルの違いになっていると思う。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
